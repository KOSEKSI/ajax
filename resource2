package com.tma.user.info.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.invoke.MethodHandles;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.naming.Context;
import javax.portlet.PortletContext;
import javax.portlet.PortletRequestDispatcher;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpSession;

import org.osgi.service.component.annotations.Component;

import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCResourceCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCResourceCommand;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.tma.user.info.constants.UserInfoPortletKeys;
import com.tma.user.info.util.UserDetails;

@Component(
		immediate = true,
		property = {
				"javax.portlet.name="+ UserInfoPortletKeys.UserInfo,
				"mvc.command.name=" + UserInfoPortletKeys.FETCH_USERS
		},
		service = MVCResourceCommand.class
		)

public class UserInfoResourceCommand extends BaseMVCResourceCommand{
	private static Log logger=LogFactoryUtil.getLog(MethodHandles.lookup().lookupClass());
	@Override
	protected void doServeResource(ResourceRequest req, ResourceResponse res)
			throws Exception {

		logger.info("******** Working ********");
		String key=ParamUtil.getString(req, "search", null);
		//System.out.println("your entered value is::"+key);
		

		
		//List<User> userInfo=UserLocalServiceUtil.getUsers(104,115);
		List<User> userInfo=UserLocalServiceUtil.getUsers(1,115);
		if(key.equals("key")) {
			JSONArray UList = JSONFactoryUtil.createJSONArray();
		for (User user : userInfo)
		{ 
			JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
			JSONFname.put("fullname",user.getFullName());
			UList.put(JSONFname);

		}//for loop
		res.getWriter().write(UList.toString());
		}
		
		else if(key.equals("byname")) {
			JSONArray UList2 = JSONFactoryUtil.createJSONArray();
			String name=ParamUtil.getString(req, "searchbyname", null);
		for (User user : userInfo)
		{   
			if(user.getFullName().toLowerCase().trim().startsWith(name.toLowerCase().trim())) {
				logger.info("executing................");
			JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
			JSONFname.put("fullname",user.getFullName());
			UList2.put(JSONFname);
			}
			
		}//for loop
		res.getWriter().write(UList2.toString());
		}
		
		
		
		
		
		
		
		else if(key.equals("individual")) {
			JSONArray UList2 = JSONFactoryUtil.createJSONArray();
			String fname=ParamUtil.getString(req, "searchid", null);
			//System.out.println("value is::::"+fname);
			JSONObject JSONdetails = JSONFactoryUtil.createJSONObject();
			for (User user : userInfo)
			{ 
				
					if(user.getFullName().equals(fname))
					{
						logger.info("executing::::::::::::::::::");
					
					JSONdetails.put("scname",user.getScreenName());
					JSONdetails.put("name",user.getFullName());
					JSONdetails.put("email",user.getEmailAddress());
					JSONdetails.put("orag",user.getOrganizations().toString());
					JSONdetails.put("sites",user.getSiteGroups().toString());
					
					
					
					//UList2.put(JSONdet);
					}
					/*else
					{
						logger.info("not found::::::::::::::::::");
					}*/
				
				

			}//for loop
			res.getWriter().write(JSONdetails.toJSONString());
			}
		else {
			
			
		}
		
		logger.info("******** End ********");
	}//method close
}//class 
